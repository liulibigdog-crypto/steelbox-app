# 自定义CSS样式
st.markdown("""
    <style>
    /* 页面整体居中 */
    .block-container {
        max-width: 850px;  /* 内容宽度 */
        margin: auto;      /* 居中 */
        padding-top: 2rem;
        padding-bottom: 2rem;
        background-color: white;
        border-radius: 12px;
        box-shadow: 0px 0px 15px rgba(0,0,0,0.08);
    }
    /* 页面背景与水印 */
    body {
        background: #f7f9fb;
        background-image: url("https://via.placeholder.com/400x400.png?text=Lichen+Liu");
        background-repeat: no-repeat;
        background-attachment: fixed;
        background-position: center;
        background-size: 50%;
        opacity: 0.98;
    }
    /* 让水印淡化 */
    body::before {
        content: "";
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(255,255,255,0.7);
        z-index: -1;
    }
    </style>
    """, unsafe_allow_html=True)

# app.py
import io
import math
import streamlit as st
import matplotlib.pyplot as plt
from matplotlib.patches import Rectangle

st.set_page_config(page_title="钢箱梁截面快速设计", page_icon="🧮", layout="wide")

# ============ 顶部栏 ============
left, mid, right = st.columns([1.2, 1, 1])
with left:
    st.markdown("### 🧮 钢箱梁截面快速设计小工具")
with mid:
    st.markdown(
        "<div style='text-align:center; font-size:14px; color:gray;'>"
        "方案阶段快速初选 · 可视化 · 参数化</div>", unsafe_allow_html=True)
with right:
    st.markdown("<div style='text-align:right;'>Made by <b>Lichen Liu</b></div>", unsafe_allow_html=True)

st.markdown("---")

# ============ 选项卡 ============
tab1, tab2, tab3 = st.tabs(["① 参数输入", "② 结果与示意", "③ 说明与方法"])

# ============ 侧边栏（全局） ============
with st.sidebar:
    st.image("https://img.icons8.com/fluency/96/bridge.png", width=64)
    st.markdown("#### 设置")
    theme = st.selectbox("显示主题", ["默认", "紧凑", "大号"], index=0)
    st.caption("提示：最终排版以论文需求为准，截图前可切换主题观感。")

# ============ ① 参数输入 ============
with tab1:
    st.subheader("输入参数")
    c1, c2, c3 = st.columns(3)
    with c1:
        M_pos = st.number_input("跨中正弯矩 M+ (kN·m)", value=15400.0, step=100.0, min_value=0.0)
        V = st.number_input("支点最大剪力 V (kN)", value=5360.0, step=50.0, min_value=0.0)
        fy = st.number_input("钢材屈服强度 fy (MPa)", value=345.0, step=5.0, min_value=100.0)
    with c2:
        M_neg = st.number_input("支点负弯矩 M- (kN·m)", value=32200.0, step=100.0, min_value=0.0)
        B_deck = st.number_input("单幅桥面总宽 B (m)", value=13.5, step=0.1, min_value=4.0)
        gamma0 = st.number_input("重要性系数 γ0", value=1.1, step=0.05, min_value=1.0)
    with c3:
        H = st.number_input("梁高 H (m)", value=2.0, step=0.1, min_value=0.6)
        eta_beff = st.slider("翼缘有效宽度折减系数 η (0.30–0.40)", 0.30, 0.40, 0.35, 0.01)
        st.caption("注：η 取值越小越保守；横隔较疏、偏载明显时建议取 0.30–0.33。")

    st.info("点击顶部切换到“② 结果与示意”查看可视化与校核提示。")

# ============ 计算核心（全局用） ============
fd = fy / gamma0                        # 设计强度 (MPa = N/mm2)
M_pos_Nmm = M_pos * 1e6                 # kN·m -> N·mm
M_neg_Nmm = M_neg * 1e6

# 所需截面模量（mm3）
Wreq_pos = M_pos_Nmm / fd
Wreq_neg = M_neg_Nmm / fd

# 经验：单箱外宽约 0.65~0.80 B，这里取 0.70·B 初选
B_box = 0.70 * B_deck                   # m
beff = eta_beff * (0.85 * B_box)        # m（0.85 为外伸与安全折减，工程经验）
B_box_mm = B_box * 1000
beff_mm = beff * 1000
H_mm = H * 1000

# 初选厚度（控制侧法，Hf≈H）
t_bot = Wreq_pos / (H_mm * beff_mm)     # mm，跨中正弯矩控制底板
t_top = Wreq_neg / (H_mm * beff_mm)     # mm，支点负弯矩控制顶板

# 腹板厚度（剪力初选，V ≤ 0.58 fy t_w h_w）
tau_allow = 0.58 * fy
t_web_min = (V * 1e3) / (tau_allow * H_mm) if H_mm > 0 else 0.0
t_web = max(t_web_min, 12.0)            # 构造下限 12mm 可按项目调整

# 推荐箱室数（每室宽目标约 3.0 m，限制 1~4）
target_cell_w = 3.0
Nc_guess = max(1, min(4, int(round(B_box / target_cell_w))))
# 允许手动覆盖（放在结果页更直观）
# ============ ② 结果与示意 ============
with tab2:
    st.subheader("推荐截面与校核提示")

    # 布局：左结果卡片，右示意图
    left, right = st.columns([1.1, 1.2], gap="large")

    with left:
        st.markdown("##### 关键需求与建议")
        # 三张“卡片”风格
        cA, cB, cC = st.columns(3)
        cA.metric("Wreq+ (×10⁶ mm³)", f"{Wreq_pos/1e6:.1f}")
        cB.metric("Wreq- (×10⁶ mm³)", f"{Wreq_neg/1e6:.1f}")
        cC.metric("B_box 约 (m)", f"{B_box:.2f}")

        Nc = st.selectbox("推荐单箱箱室数（可手动修改）", [1,2,3,4], index=Nc_guess-1,
                          help="每室宽约 2.5–3.5 m，取使每室宽接近 3.0 m 的整数；最终需结合扭转与横隔布置确定。")
        n_webs = Nc + 1

        st.markdown("##### 初选尺寸（方案阶段）")
        st.write(f"- 顶板厚度  **t_top**  ≈ {t_top:.1f} mm  （负弯矩控制）")
        st.write(f"- 底板厚度  **t_bot**  ≈ {t_bot:.1f} mm  （正弯矩控制）")
        st.write(f"- 腹板厚度  **t_web** ≥ {t_web:.1f} mm（剪力初选，构造下限 12 mm）")
        st.write(f"- 推荐箱室数 **Nc** = {Nc}（总腹板数 {n_webs}）")

        # 简单“满足/不满足”提示（以反算的 Wact 来看 margin）
        Wact_bot = H_mm * beff_mm * t_bot
        Wact_top = H_mm * beff_mm * t_top
        ok_bot = Wact_bot >= Wreq_pos * 0.999
        ok_top = Wact_top >= Wreq_neg * 0.999

        if ok_bot and ok_top:
            st.success("抗弯需求满足（控制侧法，Hf≈H，有效宽度法估算）。")
        else:
            st.error("抗弯需求未满足，请增厚翼缘或调整梁高/有效宽度。")

        # 导出数据（CSV）
        import pandas as pd
        df = pd.DataFrame({
            "参数":["Wreq+ (mm^3)","Wreq- (mm^3)","B_box (m)","Nc",
                   "t_top (mm)","t_bot (mm)","t_web_min (mm)","t_web(建议,mm)"],
            "数值":[Wreq_pos, Wreq_neg, B_box, Nc, t_top, t_bot, t_web_min, t_web]
        })
        st.download_button("下载结果 CSV", data=df.to_csv(index=False).encode("utf-8-sig"),
                           file_name="steel_box_section_results.csv", mime="text/csv")

    with right:
        st.markdown("##### 推荐截面示意（非比例，仅供展示）")

        def draw_section(B_box_mm, H_mm, t_top, t_bot, Nc):
            fig, ax = plt.subplots(figsize=(8, 4), dpi=150)
            # 外轮廓
            ax.add_patch(Rectangle((0, 0), B_box_mm, H_mm, fill=False, linewidth=1.6))
            # 顶/底板
            ax.add_patch(Rectangle((0, H_mm - t_top), B_box_mm, t_top, fill=True, alpha=0.18))
            ax.add_patch(Rectangle((0, 0), B_box_mm, t_bot, fill=True, alpha=0.18))
            # 内腹板（等分）
            if Nc >= 2:
                spacing = B_box_mm / Nc
                for i in range(1, Nc):
                    x = i * spacing
                    ax.add_line(plt.Line2D([x, x], [t_bot, H_mm - t_top], linewidth=1.2))
            # 注释
            ax.text(B_box_mm/2, H_mm + 0.035*H_mm, f"B_box ≈ {B_box_mm/1000:.2f} m", ha="center", va="bottom")
            ax.text(-0.03*B_box_mm, H_mm/2, f"H = {H_mm/1000:.2f} m", ha="right", va="center", rotation=90)
            ax.text(B_box_mm*0.02, H_mm - t_top/2, f"t_top≈{t_top:.0f} mm", va="center")
            ax.text(B_box_mm*0.02, t_bot/2, f"t_bot≈{t_bot:.0f} mm", va="center")
            ax.set_aspect('equal'); ax.set_xlim(-0.1*B_box_mm, 1.1*B_box_mm); ax.set_ylim(-0.1*H_mm, 1.15*H_mm)
            ax.axis('off')
            return fig

        fig = draw_section(B_box_mm, H_mm, t_top, t_bot, Nc)
        st.pyplot(fig, clear_figure=True)

        # 下载 PNG
        buf = io.BytesIO()
        fig.savefig(buf, format="png", bbox_inches="tight")
        st.download_button("下载示意图 PNG", data=buf.getvalue(),
                           file_name="steel_box_section.png", mime="image/png")

# ============ ③ 说明与方法 ============
with tab3:
    st.subheader("算法与使用说明（摘要）")
    st.markdown(
        """
- **抗弯**：按控制侧原则并采用有效宽度法估算翼缘抵抗矩；满足 \(W_{act} \ge W_{req}\)。
- **抗剪**：按 \(V \le 0.58 f_y\, t_w\, h_w\) 初选腹板厚度；方案阶段设定构造下限（如 12 mm）。
- **箱室**：经验推荐单箱外宽约 \(0.65\sim0.80\,B\)，每室宽 \(2.5\sim3.5\) m，据此建议 \(N_c\) 并允许手动覆盖。
- **定位**：本工具用于方案阶段快速初选，定型需做强度、稳定、宽厚比、疲劳与构造等详验算。
        """
    )
    st.caption("© 2025 Lichen Liu | 教学与方案比选用途。")
